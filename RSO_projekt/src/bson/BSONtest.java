package bson;

import static junit.framework.Assert.*;

import org.junit.Test;

public class BSONtest {
	// parsowanie string, int i date
	byte[] testData = new byte[] { 0x45, 0x00, 0x00, 0x00, 0x07, 0x5f,
			0x69, 0x64, 0x00, 0x51, (byte)0x84, 0x03, (byte)0xa2, 0x58, 0x54, 0x2b,
			(byte)0xcd, (byte)0xa4, (byte)0xf1, (byte)0xc1, 0x30, 0x02, 0x6e, 0x61, 0x6d, 0x65,
			0x00, 0x07, 0x00, 0x00, 0x00, 0x6d, 0x6b, 0x79, 0x6f, 0x6e,
			0x67, 0x00, 0x10, 0x61, 0x67, 0x65, 0x00, 0x1e, 0x00, 0x00,
			0x00, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44,
			0x61, 0x74, 0x65, 0x00, 0x0e, 0x34, (byte)0xae, 0x6b, 0x3e, 0x01,
			0x00, 0x00 };
	// parsowanie string i zagnie¿d¿onego BSONa
	byte[] testData2 = new byte[] { 0x71, 0x00, 0x00, 0x00, 0x07, 0x5f,
			0x69, 0x64, 0x00, 0x51, 0x7e, (byte)0xaa, (byte)0xba, (byte)0xc4, 0x53, (byte)0xf2,
			0x6e, 0x59, (byte)0x9d, 0x2b, 0x53, 0x02, 0x49, 0x6d, 0x69, 0x65,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x4a, 0x61, 0x6e, 0x00, 0x02,
			0x4e, 0x61, 0x7a, 0x77, 0x69, 0x73, 0x6b, 0x6f, 0x00, 0x06,
			0x00, 0x00, 0x00, 0x4e, 0x6f, 0x77, 0x61, 0x6b, 0x00, 0x03,
			0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x00, 0x30, 0x00,
			0x00, 0x00, 0x02, 0x63, 0x69, 0x74, 0x79, 0x00, 0x09, 0x00,
			0x00, 0x00, 0x57, 0x61, 0x72, 0x73, 0x7a, 0x61, 0x77, 0x61,
			0x00, 0x02, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x00, 0x0c,
			0x00, 0x00, 0x00, 0x4e, 0x6f, 0x77, 0x6f, 0x77, 0x69, 0x65,
			0x6a, 0x73, 0x6b, 0x61, 0x00, 0x00, 0x00 };
	// parsowanie tablicy, nulla, floata i boola
	byte[] testData3 = new byte[] { 0x66, 0x00, 0x00, 0x00, 0x07, 0x5f,
			0x69, 0x64, 0x00, 0x51, (byte)0x8e, 0x4c, (byte)0x9c, (byte)0xd7, 0x20, 0x17,
			0x46, 0x31, (byte)0xd3, 0x6c, (byte)0x9e, 0x04, 0x61, 0x72, 0x72, 0x61,
			0x79, 0x77, 0x69, 0x74, 0x68, 0x6e, 0x75, 0x6c, 0x6c, 0x00,
			0x1d, 0x00, 0x00, 0x00, 0x10, 0x30, 0x00, 0x01, 0x00, 0x00,
			0x00, 0x0a, 0x31, 0x00, 0x10, 0x32, 0x00, 0x02, 0x00, 0x00,
			0x00, 0x10, 0x33, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01,
			0x66, 0x6c, 0x6f, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x15, 0x40, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
			0x61, 0x6e, 0x00, 0x01, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
			0x61, 0x6e, 0x32, 0x00, 0x00, 0x00 };
	@Test
	public void byte2BSON() 
	{
		BSONDocument doc = new BSONDocument();
		BSONDocument doc2 = new BSONDocument();
		BSONDocument doc3 = new BSONDocument();
		
		BSON.parseBSON(testData, doc);
		BSON.parseBSON(testData2, doc2);
		BSON.parseBSON(testData3, doc3);
	}
	
	@Test
	public void BSON2byte() 
	{
		BSONDocument doc1 = new BSONDocument();
		BSONDocument doc2 = new BSONDocument();
		BSONDocument doc3 = new BSONDocument();
		
		BSON.parseBSON(testData, doc1);
		BSON.parseBSON(testData2, doc2);
		BSON.parseBSON(testData3, doc3);
		
		byte[] bson1 = BSON.getBSON(doc1);
		byte[] bson2 = BSON.getBSON(doc2);
		byte[] bson3 = BSON.getBSON(doc3);
		
		BSONDocument doc1b = new BSONDocument();
		BSONDocument doc2b = new BSONDocument();
		BSONDocument doc3b = new BSONDocument();
		
		BSON.parseBSON(bson1, doc1b);
		BSON.parseBSON(bson2, doc2b);
		BSON.parseBSON(bson3, doc3b);
	}
}
